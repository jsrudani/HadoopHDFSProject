/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.apache.hadoop.mapreduce.jobhistory;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AMStarted extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AMStarted\",\"namespace\":\"org.apache.hadoop.mapreduce.jobhistory\",\"fields\":[{\"name\":\"applicationAttemptId\",\"type\":\"string\"},{\"name\":\"startTime\",\"type\":\"long\"},{\"name\":\"containerId\",\"type\":\"string\"},{\"name\":\"nodeManagerHost\",\"type\":\"string\"},{\"name\":\"nodeManagerPort\",\"type\":\"int\"},{\"name\":\"nodeManagerHttpPort\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence applicationAttemptId;
  @Deprecated public long startTime;
  @Deprecated public java.lang.CharSequence containerId;
  @Deprecated public java.lang.CharSequence nodeManagerHost;
  @Deprecated public int nodeManagerPort;
  @Deprecated public int nodeManagerHttpPort;

  /**
   * Default constructor.
   */
  public AMStarted() {}

  /**
   * All-args constructor.
   */
  public AMStarted(java.lang.CharSequence applicationAttemptId, java.lang.Long startTime, java.lang.CharSequence containerId, java.lang.CharSequence nodeManagerHost, java.lang.Integer nodeManagerPort, java.lang.Integer nodeManagerHttpPort) {
    this.applicationAttemptId = applicationAttemptId;
    this.startTime = startTime;
    this.containerId = containerId;
    this.nodeManagerHost = nodeManagerHost;
    this.nodeManagerPort = nodeManagerPort;
    this.nodeManagerHttpPort = nodeManagerHttpPort;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return applicationAttemptId;
    case 1: return startTime;
    case 2: return containerId;
    case 3: return nodeManagerHost;
    case 4: return nodeManagerPort;
    case 5: return nodeManagerHttpPort;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: applicationAttemptId = (java.lang.CharSequence)value$; break;
    case 1: startTime = (java.lang.Long)value$; break;
    case 2: containerId = (java.lang.CharSequence)value$; break;
    case 3: nodeManagerHost = (java.lang.CharSequence)value$; break;
    case 4: nodeManagerPort = (java.lang.Integer)value$; break;
    case 5: nodeManagerHttpPort = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'applicationAttemptId' field.
   */
  public java.lang.CharSequence getApplicationAttemptId() {
    return applicationAttemptId;
  }

  /**
   * Sets the value of the 'applicationAttemptId' field.
   * @param value the value to set.
   */
  public void setApplicationAttemptId(java.lang.CharSequence value) {
    this.applicationAttemptId = value;
  }

  /**
   * Gets the value of the 'startTime' field.
   */
  public java.lang.Long getStartTime() {
    return startTime;
  }

  /**
   * Sets the value of the 'startTime' field.
   * @param value the value to set.
   */
  public void setStartTime(java.lang.Long value) {
    this.startTime = value;
  }

  /**
   * Gets the value of the 'containerId' field.
   */
  public java.lang.CharSequence getContainerId() {
    return containerId;
  }

  /**
   * Sets the value of the 'containerId' field.
   * @param value the value to set.
   */
  public void setContainerId(java.lang.CharSequence value) {
    this.containerId = value;
  }

  /**
   * Gets the value of the 'nodeManagerHost' field.
   */
  public java.lang.CharSequence getNodeManagerHost() {
    return nodeManagerHost;
  }

  /**
   * Sets the value of the 'nodeManagerHost' field.
   * @param value the value to set.
   */
  public void setNodeManagerHost(java.lang.CharSequence value) {
    this.nodeManagerHost = value;
  }

  /**
   * Gets the value of the 'nodeManagerPort' field.
   */
  public java.lang.Integer getNodeManagerPort() {
    return nodeManagerPort;
  }

  /**
   * Sets the value of the 'nodeManagerPort' field.
   * @param value the value to set.
   */
  public void setNodeManagerPort(java.lang.Integer value) {
    this.nodeManagerPort = value;
  }

  /**
   * Gets the value of the 'nodeManagerHttpPort' field.
   */
  public java.lang.Integer getNodeManagerHttpPort() {
    return nodeManagerHttpPort;
  }

  /**
   * Sets the value of the 'nodeManagerHttpPort' field.
   * @param value the value to set.
   */
  public void setNodeManagerHttpPort(java.lang.Integer value) {
    this.nodeManagerHttpPort = value;
  }

  /** Creates a new AMStarted RecordBuilder */
  public static org.apache.hadoop.mapreduce.jobhistory.AMStarted.Builder newBuilder() {
    return new org.apache.hadoop.mapreduce.jobhistory.AMStarted.Builder();
  }
  
  /** Creates a new AMStarted RecordBuilder by copying an existing Builder */
  public static org.apache.hadoop.mapreduce.jobhistory.AMStarted.Builder newBuilder(org.apache.hadoop.mapreduce.jobhistory.AMStarted.Builder other) {
    return new org.apache.hadoop.mapreduce.jobhistory.AMStarted.Builder(other);
  }
  
  /** Creates a new AMStarted RecordBuilder by copying an existing AMStarted instance */
  public static org.apache.hadoop.mapreduce.jobhistory.AMStarted.Builder newBuilder(org.apache.hadoop.mapreduce.jobhistory.AMStarted other) {
    return new org.apache.hadoop.mapreduce.jobhistory.AMStarted.Builder(other);
  }
  
  /**
   * RecordBuilder for AMStarted instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AMStarted>
    implements org.apache.avro.data.RecordBuilder<AMStarted> {

    private java.lang.CharSequence applicationAttemptId;
    private long startTime;
    private java.lang.CharSequence containerId;
    private java.lang.CharSequence nodeManagerHost;
    private int nodeManagerPort;
    private int nodeManagerHttpPort;

    /** Creates a new Builder */
    private Builder() {
      super(org.apache.hadoop.mapreduce.jobhistory.AMStarted.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.apache.hadoop.mapreduce.jobhistory.AMStarted.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing AMStarted instance */
    private Builder(org.apache.hadoop.mapreduce.jobhistory.AMStarted other) {
            super(org.apache.hadoop.mapreduce.jobhistory.AMStarted.SCHEMA$);
      if (isValidValue(fields()[0], other.applicationAttemptId)) {
        this.applicationAttemptId = data().deepCopy(fields()[0].schema(), other.applicationAttemptId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.startTime)) {
        this.startTime = data().deepCopy(fields()[1].schema(), other.startTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.containerId)) {
        this.containerId = data().deepCopy(fields()[2].schema(), other.containerId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.nodeManagerHost)) {
        this.nodeManagerHost = data().deepCopy(fields()[3].schema(), other.nodeManagerHost);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.nodeManagerPort)) {
        this.nodeManagerPort = data().deepCopy(fields()[4].schema(), other.nodeManagerPort);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.nodeManagerHttpPort)) {
        this.nodeManagerHttpPort = data().deepCopy(fields()[5].schema(), other.nodeManagerHttpPort);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'applicationAttemptId' field */
    public java.lang.CharSequence getApplicationAttemptId() {
      return applicationAttemptId;
    }
    
    /** Sets the value of the 'applicationAttemptId' field */
    public org.apache.hadoop.mapreduce.jobhistory.AMStarted.Builder setApplicationAttemptId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.applicationAttemptId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'applicationAttemptId' field has been set */
    public boolean hasApplicationAttemptId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'applicationAttemptId' field */
    public org.apache.hadoop.mapreduce.jobhistory.AMStarted.Builder clearApplicationAttemptId() {
      applicationAttemptId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'startTime' field */
    public java.lang.Long getStartTime() {
      return startTime;
    }
    
    /** Sets the value of the 'startTime' field */
    public org.apache.hadoop.mapreduce.jobhistory.AMStarted.Builder setStartTime(long value) {
      validate(fields()[1], value);
      this.startTime = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'startTime' field has been set */
    public boolean hasStartTime() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'startTime' field */
    public org.apache.hadoop.mapreduce.jobhistory.AMStarted.Builder clearStartTime() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'containerId' field */
    public java.lang.CharSequence getContainerId() {
      return containerId;
    }
    
    /** Sets the value of the 'containerId' field */
    public org.apache.hadoop.mapreduce.jobhistory.AMStarted.Builder setContainerId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.containerId = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'containerId' field has been set */
    public boolean hasContainerId() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'containerId' field */
    public org.apache.hadoop.mapreduce.jobhistory.AMStarted.Builder clearContainerId() {
      containerId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'nodeManagerHost' field */
    public java.lang.CharSequence getNodeManagerHost() {
      return nodeManagerHost;
    }
    
    /** Sets the value of the 'nodeManagerHost' field */
    public org.apache.hadoop.mapreduce.jobhistory.AMStarted.Builder setNodeManagerHost(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.nodeManagerHost = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'nodeManagerHost' field has been set */
    public boolean hasNodeManagerHost() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'nodeManagerHost' field */
    public org.apache.hadoop.mapreduce.jobhistory.AMStarted.Builder clearNodeManagerHost() {
      nodeManagerHost = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'nodeManagerPort' field */
    public java.lang.Integer getNodeManagerPort() {
      return nodeManagerPort;
    }
    
    /** Sets the value of the 'nodeManagerPort' field */
    public org.apache.hadoop.mapreduce.jobhistory.AMStarted.Builder setNodeManagerPort(int value) {
      validate(fields()[4], value);
      this.nodeManagerPort = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'nodeManagerPort' field has been set */
    public boolean hasNodeManagerPort() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'nodeManagerPort' field */
    public org.apache.hadoop.mapreduce.jobhistory.AMStarted.Builder clearNodeManagerPort() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'nodeManagerHttpPort' field */
    public java.lang.Integer getNodeManagerHttpPort() {
      return nodeManagerHttpPort;
    }
    
    /** Sets the value of the 'nodeManagerHttpPort' field */
    public org.apache.hadoop.mapreduce.jobhistory.AMStarted.Builder setNodeManagerHttpPort(int value) {
      validate(fields()[5], value);
      this.nodeManagerHttpPort = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'nodeManagerHttpPort' field has been set */
    public boolean hasNodeManagerHttpPort() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'nodeManagerHttpPort' field */
    public org.apache.hadoop.mapreduce.jobhistory.AMStarted.Builder clearNodeManagerHttpPort() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public AMStarted build() {
      try {
        AMStarted record = new AMStarted();
        record.applicationAttemptId = fieldSetFlags()[0] ? this.applicationAttemptId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.startTime = fieldSetFlags()[1] ? this.startTime : (java.lang.Long) defaultValue(fields()[1]);
        record.containerId = fieldSetFlags()[2] ? this.containerId : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.nodeManagerHost = fieldSetFlags()[3] ? this.nodeManagerHost : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.nodeManagerPort = fieldSetFlags()[4] ? this.nodeManagerPort : (java.lang.Integer) defaultValue(fields()[4]);
        record.nodeManagerHttpPort = fieldSetFlags()[5] ? this.nodeManagerHttpPort : (java.lang.Integer) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
